[/
  Copyright 2015 Andy Thomason
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
]

[library Boost.Genetics
  [quickbook 1.6]
  [id genetics]
  [copyright 2015 Andy Thomason]
  [authors [Thomason, Andy]]
  [dirname genetics]
  [license Distributed under the
    [@http://boost.org/LICENSE_1_0.txt
      Boost Software License, Version 1.0].
  ]
]

[/ examples of links that you are likely to re-use in the text - recommended - you very often will do!]
[def __BWT [@https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform Burrows-Wheeler transform]]
[/ Hint - non-ASCII chars are used in wikipedia heading like the dash in  Burrows-Wheeler so type them in]
[def __FASTQ [@https://en.wikipedia.org/wiki/FASTQ_format FASTQ format]]



[section:readme Readme]
[/ Copied and pasted from readme]

[note This duplicates stuff in the instruction and needs revision]

Reference data is usually in FASTA format which is a series of chromomosome names and bases.

Read data from the[@http://www.illumina.com/applications/sequencing.html Illumina machines]
is in FASTQ format with large numbers of shorter sequences of around 30-200 bases.
Currently this is around 100, but the trend is for longer sequences.

Aligned data the result of an aligner such as Tophat or Star is usually in the SAM or BAM (compressed SAM) format
and is similar to the __FASTA but has additional metadata.

We provide both packed (2 bits/base) and unpacked data (eg. `std::string`) algorithms.

Most genetic searches revolve around the creation of Suffix Arrays
which are a sort of all the substrings of a sequence to the end.

For example:
[pre
"hello" consists of the substrings "hello", "ello", "llo", "lo", "p" and ""
]

The suffix array is:
[pre
5 "" 1 "ello" 0 "hello" 3 "lo" 2 "llo" 4 "o"
]

See Wikipedia for a more comprehensive discussion.  TODO  Reference needed here!

We can use the suffix array to look up the position of any sequence by,
for example, doing a binary chop on the substrings.
In practice this is not a sensible thing to do as each of the memory accesses
to the substrings may cost thousands of cycles.

We can also calculate the __BWT (BWT) which
simplifies the task of finding the sequence prior to the current one,
allowing you to extend the search by one letter in each operation.
This also is a very inefficient use of modern memory architectures which are deeply heirarchical.

Calculating a full suffix array for the 3.2 billion letters of the human genome is an expensive process,
but fortunately we don't need to compute a full suffix array as sequences of 16 or more letters are likely to be unique.

Far better is to calculate a hybrid indexed suffix array which gives you all the substrings
starting with a fixed number of letters.
For this we add an index of 2^(2N) entries for N letters the suffixes sorted by address in the array instead of value.

This means that we can use two very expensive memory accesses to find a set of addresses
for a sequence and then a small number of very inexpensive accesses
and a merge operation to find exact matches of any length (N x M).

For inexact matches, we can filter the M matches we have to a much smaller set
where we can then do expensive tests on the reference itself.

For a very large number of potential errors, such as 6 errors in a 20 character string,
it is fastest to brute-force search the genome.
Here we can make use of leading zero and population count operations to rapidly screen large number of bases.

[endsect] [/section:readme Readme]

[section:introduction Introduction]

This library provides memory efficient containers and search
algorithms for working with genetic sequences.

The human genome consists of about 3.2 billion bases A, C, G or T
packed into a number of chromosomes in the nucleus and in mitochondria,
the little cell-like structures that generate energy for the cell.

The genome is used as a template for building proteins which form
complex nano-scale machines that implement the machinery of life
and to encode complex control systems which switch on and off in the
presence of signals.

The DNA in the chromosomes is copied into RNA which has the alphabet
A, C, G, U but it is common to use the DNA letters, often because we
read RNA by converting it to DNA first. RNA is often more interesting
than DNA as it shows a snapshot of the working activity of each cell type.

[table:genetics The Boost.Genetics Library
[ [Component] [Description] ]
[ [`dna_string`]
[Compact container for DNA sequences with fast linear search. Can only hold A, C, T or G]
]
[ [`augmented_string`]
[DNA string augmented by run-length encoded. Can hold any character.]
]
[ [`two_stage_index`]
[Hybrid cache efficient index for DNA data]
]
] [/table:genetics]

[endsect] [/section Introduction]

[section:examples Examples]
[include examples.qbk]
[endsect] [/section examples]

[section:rationale Rationale]
[h4 Gene Searches]
TODO
[endsect] [/section Rationale]

[section:history History]

[h5 Pre-review history]

* Documentation prototype using Quickbook, Doxygen and Boost.Autoindex drafted by Paul A. Bristow.
* [@https://github.com/andy-thomason/genetics/  Boost.Genetics library proposed by Andy Thomason]
* [@http://boost.2283326.n4.nabble.com/Genetics-library-advice-needed-td4676695.html Post asking for advice rolling out the first draft of our genetics library]

Expression of interest in a genetic algorthms library.  Date?

[endsect] [/section:history History]


